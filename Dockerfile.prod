# svc-face-recon/Dockerfile.prod
FROM python:3.11-slim

ENV SERVICE_NAME=svc-face-recon
ENV INSIGHTFACE_HOME=/models
ENV HF_HOME=/models
ENV PYTHONUNBUFFERED=1
ENV ORT_DISABLE_CUDA=1

# Depend√™ncias nativas COMPLETAS
RUN apt-get update && apt-get install -y --no-install-recommends \
    libgl1 libglib2.0-0 libstdc++6 libgomp1 \
    git build-essential curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Cria diret√≥rio de modelos
RUN mkdir -p /models

# Copia requirements
COPY requirements.txt .

# Upgrade pip
RUN pip install --upgrade pip setuptools wheel

# Instala√ß√£o dos pacotes
RUN cat requirements.txt | while read package; do \
    if [ -n "$package" ]; then \
        echo "=== INSTALANDO: $package ===" && \
        pip install --no-cache-dir --timeout=120 "$package" || \
        (echo "=== FALHA EM: $package ===" && exit 1); \
    fi; \
    done

# VERIFICA√á√ÉO dos pacotes instalados
RUN echo "=== VERIFICANDO PACOTES ===" && \
    python -c "import insightface; print('‚úÖ insightface OK')" && \
    python -c "import fastapi; print('‚úÖ fastapi OK')" && \
    python -c "import uvicorn; print('‚úÖ uvicorn OK')" && \
    echo "=== PACOTES VERIFICADOS ==="

# DOWNLOAD DOS MODELOS durante o build
RUN echo "=== INICIANDO DOWNLOAD DOS MODELOS ===" && \
    python -c "
import os
os.environ['INSIGHTFACE_HOME'] = '/models'
os.environ['ORT_DISABLE_CUDA'] = '1'
os.environ['HF_HUB_DISABLE_SYMLINKS_WARNING'] = '1'

print('üì• Configurando ambiente para download...')
print(f'INSIGHTFACE_HOME: {os.environ[\"INSIGHTFACE_HOME\"]}')

try:
    from insightface.app import FaceAnalysis
    print('üöÄ Iniciando download do modelo buffalo_l...')

    # Configura a aplica√ß√£o
    app = FaceAnalysis(
        name='buffalo_l',
        allowed_modules=['detection', 'recognition'],
        providers=['CPUExecutionProvider']
    )

    # Este comando faz o download dos modelos
    app.prepare(ctx_id=-1, det_size=(640, 640))

    print('‚úÖ Modelos baixados com sucesso!')
    print('üìÅ Local dos modelos:', os.environ['INSIGHTFACE_HOME'])

    # Lista os arquivos baixados
    import glob
    model_files = glob.glob('/models/**/*', recursive=True)
    print('üìÑ Arquivos baixados:')
    for f in model_files[:10]:  # Mostra os primeiros 10 arquivos
        print(f'   - {f}')

except Exception as e:
    print(f'‚ùå Erro no download: {e}')
    print('‚ö†Ô∏è Os modelos ser√£o baixados no primeiro uso da aplica√ß√£o')
    exit(0)  # N√£o falha o build se o download der erro
"

COPY app ./app
COPY .env ./.env

EXPOSE 8001

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8001", "--workers", "1"]
