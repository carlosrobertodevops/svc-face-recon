# syntax=docker/dockerfile:1.6
# Dockerfile.prod — build estável (sem apt-get e sem criar nada em /root)

FROM python:3.11

# Configurações em runtime e locais de cache 100% graváveis
ENV SERVICE_NAME=svc-face-recon \
    ENVIRONMENT=production \
    INSIGHTFACE_HOME=/app/.insightface \
    HF_HOME=/app/.models \
    ORT_DISABLE_CUDA=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    UVICORN_WORKERS=2 \
    OMP_NUM_THREADS=1 \
    MKL_NUM_THREADS=1 \
    OPENBLAS_NUM_THREADS=1

WORKDIR /app

# Cria diretórios de cache DENTRO do /app (evita /root e problemas no builder)
RUN mkdir -p /app/.insightface /app/.models

# Dependências Python via wheels (evita apt-get no Coolify)
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Pré-download dos modelos do insightface (CPU). Se não conseguir, NÃO falha o build.
RUN python - <<'PY'
import os
os.environ.setdefault("INSIGHTFACE_HOME", "/app/.insightface")
os.environ["ORT_DISABLE_CUDA"] = "1"
try:
    from insightface.app import FaceAnalysis
    app = FaceAnalysis(name="buffalo_l", allowed_modules=["detection","recognition"])
    app.prepare(ctx_id=-1, det_size=(640,640))
    print("✔ Modelos prontos em:", os.environ["INSIGHTFACE_HOME"])
except Exception as e:
    # Em alguns builders sem rede/SSL, pode falhar — seguimos em frente.
    print("[WARN] Pré-download opcional falhou:", e)
PY

# Código da aplicação
COPY app ./app
COPY .env.example ./.env

EXPOSE 8000

# Uvicorn direto (sem scripts externos)
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]