# syntax=docker/dockerfile:1.6
# svc-face-recon/Dockerfile.prod — Coolify (robusto)

FROM python:3.11-slim

ENV SERVICE_NAME=svc-face-recon \
    INSIGHTFACE_HOME=/tmp/insightface \
    HF_HOME=/tmp/insightface \
    ORT_DISABLE_CUDA=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=300 \
    PIP_RETRIES=5

WORKDIR /app

# SO deps mínimos (IPv4 + retries p/ ambientes restritos)
RUN set -eux; \
    printf 'Acquire::Retries "5";\nAcquire::http::No-Cache "true";\nAcquire::ForceIPv4 "true";\n' > /etc/apt/apt.conf.d/99ci; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        ca-certificates curl libgl1 libglib2.0-0 libstdc++6 libgomp1; \
    rm -rf /var/lib/apt/lists/*

# Instala todas as dependências de uma vez (incluindo as pesadas)
COPY requirements.txt .
RUN python -m pip install --only-binary=:all: --prefer-binary -r requirements.txt

# Pré-download dos modelos (não quebra o build se falhar)
RUN python - <<'PY' || true
import os
os.environ["INSIGHTFACE_HOME"]="/tmp/insightface"
os.environ["ORT_DISABLE_CUDA"]="1"
from insightface.app import FaceAnalysis
app = FaceAnalysis(name="buffalo_l", allowed_modules=["detection","recognition"])
app.prepare(ctx_id=-1, det_size=(640,640))
print("Modelos preparados em", os.environ["INSIGHTFACE_HOME"])
PY

# Código
COPY app ./app
COPY .env.example ./.env

EXPOSE 8000
CMD ["uvicorn","app.main:app","--host","0.0.0.0","--port","8000"]
