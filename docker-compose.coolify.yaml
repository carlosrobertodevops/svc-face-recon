name: svc-face-recon-coolify

services:
  # -------------------- DATABASE (pgvector) --------------------
  db:
    image: pgvector/pgvector:pg16
    container_name: svc-face-recon-db
    env_file:
      - .env.coolify
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?defina_no_env_coolify}
      POSTGRES_DB: ${POSTGRES_DB:-svc_face_recon}
    volumes:
      - ./_data/pg:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h 127.0.0.1 -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-svc_face_recon} || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 40
      start_period: 60s
    restart: unless-stopped
    networks: [monitoring]

  # --- APLICA EXTENSÃO/TABELAS/ÍNDICES (idempotente) ---
  db-init:
    image: postgres:16-alpine
    container_name: svc-face-recon-db-init
    env_file:
      - .env.coolify
    depends_on:
      db:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      set -e
      echo ">> Aguardando DB pronto e aplicando DDL idempotente..."
      export PGPASSWORD="${POSTGRES_PASSWORD:?defina_no_env_coolify}"
      psql -v ON_ERROR_STOP=1 -h db -U "${POSTGRES_USER:-postgres}" -d "${POSTGRES_DB:-svc_face_recon}" <<'SQL'
      CREATE EXTENSION IF NOT EXISTS vector;

      CREATE TABLE IF NOT EXISTS member_faces (
        member_id text PRIMARY KEY,
        embedding vector(512) NOT NULL
      );

      CREATE INDEX IF NOT EXISTS member_faces_hnsw
      ON member_faces USING hnsw (embedding vector_l2_ops)
      WITH (m = 16, ef_construction = 200);
      SQL
      echo ">> DDL aplicada com sucesso."
    restart: "no"
    networks: [monitoring]

  # -------------------- REDIS (cache) --------------------
  redis:
    image: redis:7-alpine
    container_name: svc-face-recon-redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - ./_data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 5s
    restart: unless-stopped
    networks: [monitoring]

  # -------------------- APP --------------------
  svc-face-recon:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: svc-face-recon
    env_file:
      - .env.coolify
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:?defina_no_env_coolify}@db:5432/${POSTGRES_DB:-svc_face_recon}?sslmode=disable}
      HOST: ${HOST:-0.0.0.0}
      PORT: ${PORT:-8000}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
    depends_on:
      db:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./.cache/insightface:/root/.insightface
    restart: unless-stopped
    networks: [monitoring]

  # -------------------- OBSERVABILITY (opcional) --------------------
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    volumes:
      - ./observabilidade/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./observabilidade/prometheus/data:/prometheus
    restart: unless-stopped
    networks: [monitoring]

  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    env_file:
      - .env.coolify
    volumes:
      - ./observabilidade/grafana/data:/var/lib/grafana
      - ./observabilidade/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks: [monitoring]

  node-exporter:
    image: prom/node-exporter:v1.8.1
    container_name: node-exporter
    restart: unless-stopped
    networks: [monitoring]

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped
    networks: [monitoring]

  datadog:
    image: datadog/agent:7.52.0
    container_name: datadog
    env_file:
      - .env.coolify
    environment:
      DD_SITE: ${DD_SITE:-datadoghq.com}
      DD_LOGS_ENABLED: ${DD_LOGS_ENABLED:-true}
      DD_APM_ENABLED: ${DD_APM_ENABLED:-true}
      DD_DOGSTATSD_NON_LOCAL_TRAFFIC: ${DD_DOGSTATSD_NON_LOCAL_TRAFFIC:-true}
      DD_CONTAINER_COLLECT_ALL: ${DD_CONTAINER_COLLECT_ALL:-true}
      DD_PROCESS_AGENT_ENABLED: ${DD_PROCESS_AGENT_ENABLED:-true}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
    restart: unless-stopped
    networks: [monitoring]

networks:
  monitoring:
    driver: bridge
