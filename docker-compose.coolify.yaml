# name: svc-face-recon-local

services:
  # -------------------- DATABASE (pgvector) --------------------
  db:
    image: pgvector/pgvector:pg16
    container_name: svc-face-recon-db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./_data/pg:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h 127.0.0.1 -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 40
      start_period: 60s
    restart: unless-stopped
    networks: [monitoring]
    profiles: ["app"]

  # --- APLICA EXTENSÃO/TABELAS/ÍNDICES (idempotente) ---
  db-init:
    image: postgres:16-alpine
    container_name: svc-face-recon-db-init
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      set -e
      echo ">> Aguardando DB pronto e aplicando DDL idempotente..."
      export PGPASSWORD="${POSTGRES_PASSWORD:-Pwdsvcfacerecon}"
      psql -v ON_ERROR_STOP=1 -h db -U "${POSTGRES_USER}" -d "${POSTGRES_DB}" <<'SQL'
      CREATE EXTENSION IF NOT EXISTS vector;

      CREATE TABLE IF NOT EXISTS member_faces (
        member_id text PRIMARY KEY,
        embedding vector(512) NOT NULL
      );

      CREATE INDEX IF NOT EXISTS member_faces_hnsw
      ON member_faces USING hnsw (embedding vector_l2_ops)
      WITH (m = 16, ef_construction = 200);
      SQL
      echo ">> DDL aplicada com sucesso."
    restart: "no"
    networks: [monitoring]
    profiles: ["app"]

  # -------------------- REDIS (cache) --------------------
  redis:
    image: redis:7-alpine
    container_name: svc-face-recon-redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - ./_data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 5s
    restart: unless-stopped
    networks: [monitoring]
    profiles: ["app"]

  # -------------------- APP --------------------
  svc-face-recon:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: svc-face-recon
    ports:
      - "8001:8001"
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable"
      HOST: ${HOST}
      PORT: 8001
      REDIS_URL: ${REDIS_URL}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      SUPABASE_STORAGE_BUCKET: ${SUPABASE_STORAGE_BUCKET}
      FACE_RECOGNITION_THRESHOLD: ${FACE_RECOGNITION_THRESHOLD}
      MAX_FACES_PER_IMAGE: ${MAX_FACES_PER_IMAGE}
      MEMBERS_TABLE: ${MEMBERS_TABLE}
      MEMBERS_ID_COLUMN: ${MEMBERS_ID_COLUMN}
      MEMBERS_NAME_COLUMN: ${MEMBERS_NAME_COLUMN}
      MEMBERS_PHOTOS_COLUMN: ${MEMBERS_PHOTOS_COLUMN}
    depends_on:
      db:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    volumes:
      - ./.cache/insightface:/root/.insightface
    restart: unless-stopped
    networks: [monitoring]
    profiles: ["app"]

  # -------------------- OBSERVABILITY (profile: obs) --------------------
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./observability/prometheus/data:/prometheus
    ports:
      - "9090:9090"
    profiles: ["obs"]
    restart: unless-stopped
    networks: [monitoring]

  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    env_file:
      - .env
    volumes:
      - ./observability/grafana/data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    profiles: ["obs"]
    restart: unless-stopped
    networks: [monitoring]

  node-exporter:
    image: prom/node-exporter:v1.8.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    profiles: ["obs"]
    restart: unless-stopped
    networks: [monitoring]

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    ports:
      - "8085:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    profiles: ["obs"]
    restart: unless-stopped
    networks: [monitoring]

  datadog:
    image: datadog/agent:7.52.0
    container_name: datadog
    env_file:
      - .env
    environment:
      DD_SITE: ${DD_SITE}
      DD_API_KEY: ${DD_API_KEY}
      DD_LOGS_ENABLED: ${DD_LOGS_ENABLED}
      DD_APM_ENABLED: ${DD_APM_ENABLED}
      DD_DOGSTATSD_NON_LOCAL_TRAFFIC: ${DD_DOGSTATSD_NON_LOCAL_TRAFFIC}
      DD_CONTAINER_COLLECT_ALL: ${DD_CONTAINER_COLLECT_ALL}
      DD_PROCESS_AGENT_ENABLED: ${DD_PROCESS_AGENT_ENABLED}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
    ports:
      - "8126:8126"
      - "8125:8125/udp"
    profiles: ["obs"]
    restart: unless-stopped
    networks: [monitoring]

networks:
  monitoring:
    driver: bridge
