name: svc-face-recon-local

services:
  # -------------------- DATABASE (pgvector) --------------------
  db:
    image: pgvector/pgvector:pg16
    container_name: svc-face-recon-db
    env_file:
      - .env.local
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-svc_face_recon}
    ports:
      - "5432:5432"
    volumes:
      - ./_data/pg:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-svc_face_recon}",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks: [monitoring]

  # -------------------- APP --------------------
  svc-face-recon:
    build:
      context: .
    container_name: svc-face-recon
    ports:
      - "8000:8000"
    env_file:
      - .env.local
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-svc_face_recon}}
      HOST: ${HOST:-0.0.0.0}
      PORT: ${PORT:-8000}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./.cache/insightface:/root/.insightface
    restart: unless-stopped
    networks: [monitoring]

  # -------------------- OBSERVABILITY (profile: obs) --------------------
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./observability/prometheus/data:/prometheus
    ports:
      - "9090:9090"
    profiles: ["obs"]
    restart: unless-stopped
    networks: [monitoring]

  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    env_file:
      - .env.local
    volumes:
      - ./observability/grafana/data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    profiles: ["obs"]
    restart: unless-stopped
    networks: [monitoring]

  node-exporter:
    image: prom/node-exporter:v1.8.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    profiles: ["obs"]
    restart: unless-stopped
    networks: [monitoring]

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    ports:
      - "8085:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    profiles: ["obs"]
    restart: unless-stopped
    networks: [monitoring]

  datadog:
    image: datadog/agent:7
    container_name: datadog
    env_file:
      - .env.local
    environment:
      DD_SITE: ${DD_SITE:-datadoghq.com}
      DD_LOGS_ENABLED: ${DD_LOGS_ENABLED:-true}
      DD_APM_ENABLED: ${DD_APM_ENABLED:-true}
      DD_DOGSTATSD_NON_LOCAL_TRAFFIC: ${DD_DOGSTATSD_NON_LOCAL_TRAFFIC:-true}
      DD_CONTAINER_COLLECT_ALL: ${DD_CONTAINER_COLLECT_ALL:-true}
      DD_PROCESS_AGENT_ENABLED: ${DD_PROCESS_AGENT_ENABLED:-true}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
    ports:
      - "8126:8126"
      - "8125:8125/udp"
    profiles: ["obs"]
    restart: unless-stopped
    networks: [monitoring]

networks:
  monitoring:
    driver: bridge
