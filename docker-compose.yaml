name: svc-face-recon-local

services:
  # -------------------- DATABASE (pgvector) --------------------
  db:
    image: pgvector/pgvector:pg16
    container_name: svc-face-recon-db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./_data/pg:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks: [obs_net]

  # --- APLICA EXTENSÃO/TABELAS/ÍNDICES ---
  db-init:
    image: postgres:16-alpine
    container_name: svc-face-recon-db-init
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    command: |
      /bin/sh -c "
      set -e
      echo '>> Aguardando DB pronto...'
      sleep 10
      export PGPASSWORD='${POSTGRES_PASSWORD}'
      psql -v ON_ERROR_STOP=1 -h db -U '${POSTGRES_USER}' -d '${POSTGRES_DB}' <<'SQL'
      CREATE EXTENSION IF NOT EXISTS vector;

      CREATE TABLE IF NOT EXISTS member_faces (
        member_id text PRIMARY KEY,
        embedding vector(512) NOT NULL
      );

      CREATE INDEX IF NOT EXISTS member_faces_hnsw
      ON member_faces USING hnsw (embedding vector_l2_ops)
      WITH (m = 16, ef_construction = 200);
      SQL
      echo '>> DDL aplicada com sucesso.'
      "
    restart: "no"
    networks: [obs_net]

  # -------------------- REDIS (cache) --------------------
  redis:
    image: redis:7-alpine
    container_name: svc-face-recon-redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - ./_data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks: [obs_net]

  # -------------------- APP --------------------
  svc-face-recon:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: svc-face-recon
    ports:
      - "8001:8001"
    env_file:
      - .env
    environment:
      # Garante todas as variáveis necessárias
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      REDIS_URL: "redis://redis:6379/0"
      INSIGHTFACE_HOME: "/models"
      HF_HOME: "/models"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    volumes:
      - insightface_models:/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks: [obs_net]

networks:
  obs_net:
    external: true

volumes:
  insightface_models:
