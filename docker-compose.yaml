# name: svc-face-recon-local

services:
  # -------------------- DATABASE (pgvector) --------------------
  db:
    image: pgvector/pgvector:pg16
    container_name: svc-face-recon-db
    env_file:
      - .env.local
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./_data/pg:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h 127.0.0.1 -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 40
      start_period: 60s
    restart: unless-stopped
    networks: [monitoring]

  # --- APLICA EXTENSÃO/TABELAS/ÍNDICES (idempotente) ---
  db-init:
    image: postgres:16-alpine
    container_name: svc-face-recon-db-init
    env_file:
      - .env.local
    depends_on:
      db:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      set -e
      echo ">> Aguardando DB pronto e aplicando DDL idempotente..."
      export PGPASSWORD="${POSTGRES_PASSWORD:-Pwdsvcfacerecon}"
      psql -v ON_ERROR_STOP=1 -h db -U "${POSTGRES_USER}" -d "${POSTGRES_DB}" <<'SQL'
      CREATE EXTENSION IF NOT EXISTS vector;

      CREATE TABLE IF NOT EXISTS member_faces (
        member_id text PRIMARY KEY,
        embedding vector(512) NOT NULL
      );

      CREATE INDEX IF NOT EXISTS member_faces_hnsw
      ON member_faces USING hnsw (embedding vector_l2_ops)
      WITH (m = 16, ef_construction = 200);
      SQL
      echo ">> DDL aplicada com sucesso."
    restart: "no"
    networks: [monitoring]

  # -------------------- REDIS (cache) --------------------
  redis:
    image: redis:7-alpine
    container_name: svc-face-recon-redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - ./_data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 5s
    restart: unless-stopped
    networks: [monitoring]

  # -------------------- APP --------------------
  svc-face-recon:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: svc-face-recon
    ports:
      - "8001:8000"
    env_file:
      - .env.local
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable"
      HOST: ${HOST}
      PORT: 8000
      REDIS_URL: ${REDIS_URL}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      SUPABASE_STORAGE_BUCKET: ${SUPABASE_STORAGE_BUCKET}
      FACE_RECOGNITION_THRESHOLD: ${FACE_RECOGNITION_THRESHOLD}
      MAX_FACES_PER_IMAGE: ${MAX_FACES_PER_IMAGE}
      MEMBERS_TABLE: ${MEMBERS_TABLE}
      MEMBERS_ID_COLUMN: ${MEMBERS_ID_COLUMN}
      MEMBERS_NAME_COLUMN: ${MEMBERS_NAME_COLUMN}
      MEMBERS_PHOTOS_COLUMN: ${MEMBERS_PHOTOS_COLUMN}
    depends_on:
      db:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    volumes:
      - ./.cache/insightface:/root/.insightface
    restart: unless-stopped
    networks: [monitoring]

networks:
  monitoring:
    driver: bridge
