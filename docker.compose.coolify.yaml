name: svc-face-recon-coolify

services:
  db:
    image: pgvector/pgvector:pg16
    container_name: svc-face-recon-db
    env_file:
      - .env.coolify
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Pwdsvcfacerecon}
      POSTGRES_DB: ${POSTGRES_DB:-svc_face_recon}
    volumes:
      - /data/svc-face-recon/pg:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-svc_face_recon}",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks: [appnet]

  db-init:
    image: postgres:16-alpine
    container_name: svc-face-recon-db-init
    env_file:
      - .env.coolify
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
      export PGPASSWORD='${POSTGRES_PASSWORD:-Pwdsvcfacerecon}' &&
      psql -v ON_ERROR_STOP=1 -h db -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-svc_face_recon}
      -c \"CREATE EXTENSION IF NOT EXISTS vector;\"
      -c \"CREATE TABLE IF NOT EXISTS member_faces (
            member_id text PRIMARY KEY,
            embedding vector(512) NOT NULL
          );\"
      "
    restart: "no"
    networks: [appnet]

  svc-face-recon:
    image: ${APP_IMAGE:-svc-face-recon:latest}
    # ou build:
    # build:
    #   context: .
    container_name: svc-face-recon
    env_file:
      - .env.coolify
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-Pwdsvcfacerecon}@db:5432/${POSTGRES_DB:-svc_face_recon}?sslmode=disable}
      HOST: ${HOST:-0.0.0.0}
      PORT: ${PORT:-8000}
    depends_on:
      db:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    volumes:
      - /data/svc-face-recon/insightface:/root/.insightface
    restart: unless-stopped
    networks: [appnet]

networks:
  appnet:
    driver: bridge
